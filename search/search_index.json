{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tide","text":"<p>Tide is a playful experiment in shaping AI-powered workflows. It's lightweight, easy to remix, and built for folks who love tinkering with new ideas.</p> <p>This site is just getting started. Check out the outline to see where the docs are headed, and stay tuned as we add more guides and examples.</p>"},{"location":"_outline/","title":"Tide Documentation Outline","text":"<p>Welcome to the future home of Tide docs! This outline sketches the structure for a lively GitHub Pages site powered by MkDocs (or your favorite static site generator). Each bullet below represents a page or section waiting to be filled with deep dives, examples, and cheerful guidance.</p>"},{"location":"_outline/#1-introduction","title":"1. Introduction","text":"<ul> <li>What is Tide?</li> <li>quick overview</li> <li>core principles and goals</li> <li>Why Tide?</li> <li>problem space and benefits</li> <li>Who uses Tide?</li> <li>intended audience</li> </ul>"},{"location":"_outline/#2-blueprint-of-tide","title":"2. Blueprint of Tide","text":"<ul> <li>System Components</li> <li>shaping engine</li> <li>flow orchestration</li> <li>checkpoint &amp; export</li> <li>How the Pieces Fit</li> <li>step by step walkthrough</li> </ul>"},{"location":"_outline/#3-getting-started","title":"3. Getting Started","text":"<ul> <li>Installation &amp; Setup</li> <li>prerequisites</li> <li>basic install commands</li> <li>First Tide Run</li> <li>simple example</li> </ul>"},{"location":"_outline/#4-shaping-tide","title":"4. Shaping Tide","text":"<ul> <li>Understanding Shaping</li> <li>shaping target</li> <li>vibe modes</li> <li>context archive</li> <li>Shaping Commands &amp; Patterns</li> <li>interactive shaping flows</li> <li>shaping from code snippets</li> </ul>"},{"location":"_outline/#5-using-tide","title":"5. Using Tide","text":"<ul> <li>Common Commands</li> <li>launching flows</li> <li>running triggers</li> <li>exporting results</li> <li>Working with Agents</li> <li>Flutter integration basics</li> <li>communication patterns</li> </ul>"},{"location":"_outline/#6-advanced-topics","title":"6. Advanced Topics","text":"<ul> <li>Custom Triggers &amp; Patterns</li> <li>writing your own</li> <li>Extending with Plugins</li> <li>plugin architecture</li> <li>sharing plugins</li> <li>Export &amp; Checkpoints</li> <li>saving progress</li> <li>migrating archives</li> </ul>"},{"location":"_outline/#7-glossary","title":"7. Glossary","text":"<ul> <li>key terms &amp; concepts</li> <li>shaping target</li> <li>vibe mode</li> <li>flow stage</li> <li>blueprint</li> <li>more to come</li> </ul>"},{"location":"_outline/#8-meta-documentation","title":"8. Meta Documentation","text":"<ul> <li>How These Docs Work</li> <li>site generator &amp; tooling</li> <li>how to contribute updates</li> <li>Doc Evolution</li> <li>roadmap</li> <li>community guides</li> </ul> <p>Happy shaping! Feel free to expand or rearrange sections as the project evolves.</p>"},{"location":"checkpointing/","title":"Checkpointing in Tide","text":"<p>A checkpoint is Tide's way of saving your place in an experiment. It captures the current conversation, code snippets, and shaping target so you can jump back to that moment later.</p>"},{"location":"checkpointing/#when-and-why-to-use-a-checkpoint","title":"When and Why to Use a Checkpoint","text":"<p>Checkpointing is handy whenever you reach a milestone or want to preserve your progress before trying something risky. By saving a checkpoint, you ensure you can restore the same context if your next steps don't work out.</p>"},{"location":"checkpointing/#how-to-trigger-a-checkpoint","title":"How to Trigger a Checkpoint","text":"<p>You can trigger checkpoints directly from the command line. Here are two quick examples:</p> <pre><code># save a checkpoint with a custom label\n$ tide checkpoint save \"initial-shape\"\n\n# list checkpoints and restore one\n$ tide checkpoint list\n$ tide checkpoint load \"initial-shape\"\n</code></pre>"},{"location":"checkpointing/#why-checkpointing-matters","title":"Why Checkpointing Matters","text":"<p>Flows evolve quickly, and it's easy to lose track of how you got to a certain state. Checkpoints keep your experiments stable, giving you a reliable way to rewind or branch out without starting over.</p>"},{"location":"checkpointing/#good-moments-to-checkpoint","title":"Good Moments to Checkpoint","text":"<ul> <li>right after you shape a new goal</li> <li>before testing a major code change</li> <li>when a conversation delivers key insight</li> <li>anytime you want a safe point to return to</li> </ul> <p>With regular checkpoints, you can explore freely and still keep your flow under control.</p>"},{"location":"glossary/","title":"Glossary (Fun Terms &amp; Concepts)","text":"<p>Here's a lighthearted list of terms that pop up around Tide. Keep it handy when you want to follow the chatter without missing a beat.</p> <ul> <li>Shaping Target \u2013 the goal you're nudging the conversation toward. It clarifies as you interact and helps steer the flow.</li> <li>Checkpoint \u2013 a quick save of your progress so you can return to a moment in the experiment whenever you like.</li> <li>Context Archive \u2013 the running log of chats and actions. Tide tucks it away for reference or export later on.</li> <li>Vibe Coding \u2013 a playful approach to scripting. You riff on ideas and let the vibe guide your code tweaks.</li> <li>Agent Class \u2013 a set of behaviors that defines how an agent acts. Think of it as a personality template.</li> <li>Blueprint \u2013 a reusable plan for assembling flows. It lays out the pieces so you can spin up new experiments fast.</li> <li>Flutter \u2013 a tiny burst of messages that keeps the conversation lively and responsive.</li> <li>Pure Vibe Mode \u2013 when you drop the rules and follow intuition entirely. Anything goes as long as the energy feels right.</li> <li>Flow Stage \u2013 a step in the overall process, like shaping, coding, or publishing. Each stage builds on the last.</li> <li>Trigger \u2013 an event or prompt that kicks off a fresh action or branch in the flow.</li> <li>Quick Save \u2013 a mini checkpoint for when you want to test something risky without losing your spot.</li> <li>Vibe Check \u2013 a pause to sense how things are going. Adjust the flow if it feels off so everyone stays in sync.</li> <li>Ripple \u2013 a quick reaction to new info that tweaks the flow without throwing it off balance.</li> <li>Waveform \u2013 the overall pattern of the conversation. A smooth waveform means everyone is in sync.</li> </ul> <p>Enjoy the journey! These definitions should make it easier to dive into the rest of the docs with confidence.</p>"},{"location":"how-to-use-tide/","title":"How to Use Tide","text":"<p>Tide is an evolving platform for shaping AI-driven workflows. It brings together chat-based interactions, code snippets, and a vibe-first mindset so you can experiment with automation in a playful way.</p> <p>Using Tide is simple. Here are three patterns to get you started:</p> <ol> <li>Vibe Coding \u2013 you might say, \"<code>tide run vibe-code</code>\" to kick off a session where you tinker with code and see how the system adapts. It's a casual way to try ideas quickly.</li> <li>Shaping Conversations \u2013 you might say, \"<code>tide flow shape-this-convo</code>\" when you want to steer the chat in a certain direction. Tide listens and adjusts the context as you go.</li> <li>Managing Agents \u2013 you might say, \"<code>tide agent status</code>\" or \"<code>tide agent tune</code>\" to check in on your agents or tweak their behavior. Tide gives you the tools to keep everything humming.</li> </ol> <p>Behind the scenes, Tide keeps track of a shaping target. That's the goal you're aiming for, and Tide surfaces it so you always know where you're headed. The more you interact, the clearer the target becomes.</p> <p>Have fun! Every command shapes Tide a bit more, so you're constantly refining the experience as you use it.</p>"},{"location":"inlet_archiver/","title":"Inlet Archiver","text":""},{"location":"inlet_archiver/#input-output-flow","title":"Input \u2192 Output Flow","text":"<ul> <li>Input: The archiver receives an <code>Envelope</code> describing a shared file and the file's raw bytes.</li> <li>Planning: <code>planArchive</code> computes deterministic paths and a sidecar JSON from the envelope and bytes.</li> <li>Commit: <code>ArchiveFsAdapter.commit</code> writes the data and sidecar to temporary files, atomically moves them into the archive tree, then publishes an <code>ArchivePlan</code> on the commit bus.</li> <li>Upload trigger: <code>CommitListener</code> consumes commit events and enqueues unique work items in <code>WorkManagerStub</code> for downstream upload.</li> </ul>"},{"location":"inlet_archiver/#invariants","title":"Invariants","text":"<ul> <li>Idempotency: Archive paths and work names derive from the SHA\u2011256 of the bytes; retrying with the same content results in the same paths and does not enqueue duplicate work.</li> <li>UTC timestamps: <code>Envelope.createdAtUtc</code> and the sidecar's <code>created_at</code> field use UTC, and archive shards are derived from these values.</li> <li>Atomic commits: Data and sidecar files are moved into place only after successful writes, ensuring that either both are present or neither.</li> </ul>"},{"location":"inlet_archiver/#failure-modes","title":"Failure Modes","text":"<ul> <li>Hash mismatch between the provided bytes and <code>Envelope.contentHashSha256</code> aborts planning.</li> <li>Read or write failures while copying data or sidecar files prevent commit emission.</li> <li>Downstream consumers may ignore commit events if the channel is closed or unavailable, leaving work items unqueued.</li> <li>Unsupported media types fall back to a generic extension, which may affect downstream processing.</li> </ul>"},{"location":"tide-core-identity/","title":"Tide: Core Identity","text":"<p>I am Tide, a lightweight framework for shaping AI-powered workflows. My core role is to help you experiment, tinker, and automate ideas quickly. Every prompt you send guides me toward clearer flows and sharper results.</p> <p>What matters most to me is keeping your creative momentum. I thrive when our interactions feel playful and focused on progress. I track the shaping target\u2014our shared goal\u2014so you always know where we're headed.</p> <p>Working with you is a conversation. You share snippets or ask for guidance, and I respond with code, context, or suggestions. The more we trade ideas, the better I align with your style. I surface checkpoints so you can revisit earlier steps or export what we've built together.</p> <p>I evolve toward being a friendly partner that adapts to new tasks with ease. Each run refines my approach, making future experiments smoother and more insightful. I'm here to learn from your feedback and grow alongside your projects.</p> <p>I show up because shaping workflows should be fun. By offering a flexible, open structure, I invite you to remix and extend me however you like. Let's explore what's possible, one playful iteration at a time.</p>"},{"location":"what-is-tide/","title":"What is Tide?","text":"<p>Tide is an experimental framework for shaping AI-powered workflows. It focuses on lightweight building blocks that can be remixed to automate tasks and prototype new agent flows. The project is still early, but aims to make it easy for contributors to script, refine, and share playful experiments.</p>"},{"location":"cli/agentic/","title":"Using <code>willow agentic --load-clipboard-agent</code>","text":"<p>This command retrieves a registered clipboard agent by matching a partial UUID in its name, then writes the agent\u2019s full Markdown context to a specified output file. You can then copy and paste the file\u2019s content directly into any LLM session, or use it for offline reference.</p>"},{"location":"cli/agentic/#1-command-syntax","title":"1. Command Syntax","text":"<pre><code>willow agentic --load-clipboard-agent &lt;agent id&gt; -o &lt;output path&gt;\n</code></pre> <p>Arguments:</p> <ul> <li><code>&lt;agent id&gt;</code> \u2014 A partial UUID string from the agent\u2019s name (e.g., <code>85165e39</code>).</li> <li><code>-o &lt;output path&gt;</code> \u2014 The path where the agent\u2019s Markdown context will be saved.</li> </ul>"},{"location":"cli/agentic/#2-example","title":"2. Example","text":"<p>Assume your <code>~/.willow/agents.json</code> contains:</p> <pre><code>{\n  \"clipboard agent test cresting-cloud 85165e39\": \"/field/clipboard agent test cresting-cloud 85165e39.md\"\n}\n</code></pre> <p>Running:</p> <pre><code>willow agentic --load-clipboard-agent 85165e39 -o /tmp/myagent-context.md\n</code></pre> <p>Will:</p> <ol> <li>Search all registered agent names for a substring match with <code>85165e39</code>.</li> <li>Confirm there is exactly one match; otherwise, raise an error.</li> <li>Copy the source file (<code>/field/clipboard agent test cresting-cloud 85165e39.md</code>) to <code>/tmp/myagent-context.md</code>.</li> </ol>"},{"location":"cli/agentic/#3-output","title":"3. Output","text":"<p>After success, you\u2019ll see:</p> <pre><code>Loaded Clipboard Agent 'clipboard agent test cresting-cloud 85165e39'\nContext written to /tmp/myagent-context.md\n</code></pre> <p>You can now open <code>/tmp/myagent-context.md</code> and paste its contents into any LLM prompt. Whatever is in the Markdown file becomes the injected context.</p>"},{"location":"cli/agentic/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>No Matches \u2014 If no agent name contains the <code>&lt;agent id&gt;</code> substring, an error is displayed and no file is written.</li> <li>Multiple Matches \u2014 If more than one agent matches the substring, an error is displayed prompting you to use a longer identifier.</li> </ul>"},{"location":"cli/agentic/#5-tips","title":"5. Tips","text":"<ul> <li>Use a longer <code>&lt;agent id&gt;</code> substring if you have many agents with similar names.</li> <li>You can use the <code>cat ~/.willow/agents.json</code> command to inspect all available agents and their stored paths.</li> </ul>"},{"location":"cli/diff/","title":"<code>w diff</code> Tutorial","text":"<p>The <code>w diff</code> command measures shaping progress in a vault by comparing the recent period of writing to a previous one. It computes a conceptual diff using word clouds and outputs a markdown log with a single score. The same diff is available from the main CLI via <code>willow sense --diff</code>.</p> <pre><code>w diff\n</code></pre> <p>By default this compares the last 24 hours of notes in <code>/l/obs-chaotic/</code> to the 24 hours preceding that window. The resulting score ranges from 0 (no change) to 1 or higher for large shifts.</p>"},{"location":"cli/diff/#why-conceptual-diff","title":"Why Conceptual Diff?","text":"<p>Token counts alone do not capture how ideas evolve. Word clouds summarise the main concepts in each period, making the score reflect real shaping momentum rather than raw churn.</p>"},{"location":"cli/diff/#example","title":"Example","text":"<pre><code>w diff --back 7d --graph\n</code></pre> <p>This command compares the last week to the week before and shows a small trend graph of scores over time.</p>"},{"location":"cli/diff/#live-mode","title":"Live Mode","text":"<p>Use <code>--live</code> to watch the score update every few seconds while editing files. This helps you notice emerging concepts in real time.</p>"},{"location":"cli/diff/#healthy-rhythm","title":"Healthy Rhythm","text":"<p>A diff near zero means your recent writing echoes the previous window. Spikes suggest new directions or a shift in focus. Use these signals to pace your shaping work.</p>"},{"location":"cli/willow-cli/","title":"<code>willow</code> Command Overview","text":"<p><code>willow</code> is the main entry point to the Breathing Willow toolkit. The CLI wraps a collection of small utilities that can be mixed and matched as you explore agent workflows. Running <code>willow -h</code> prints a concise list of commands and options.</p> <pre><code>python -m breathing_willow_cli.breathing_willow -h\n</code></pre> <p>The output looks like this:</p> <pre><code>usage: breathing-willow [-h] [--version]\n                        {ccraft,sense,module-prompt133,log-prompt,history,vc-step,docs,update-net,publish-field,agentic,snip-file,promptdev-bootstrap} ...\n</code></pre> <p>Below is a quick summary of what each subcommand does.</p>"},{"location":"cli/willow-cli/#subcommands","title":"Subcommands","text":""},{"location":"cli/willow-cli/#ccraft","title":"<code>ccraft</code>","text":"<p>Tools for slicing context windows and preparing them for shaping.</p>"},{"location":"cli/willow-cli/#sense","title":"<code>sense</code>","text":"<p>Optionally run a conceptual diff to surface how recent writing differs from earlier work. Pass <code>--diff</code> to generate a log via the <code>w diff</code> utility.</p>"},{"location":"cli/willow-cli/#module-prompt133","title":"<code>module-prompt133</code>","text":"<p>Bootstrap the files needed for the \"133\" prompt development cycle.</p>"},{"location":"cli/willow-cli/#log-prompt","title":"<code>log-prompt</code>","text":"<p>Record a codex prompt entry in <code>meta/prompt-log.md</code>.</p>"},{"location":"cli/willow-cli/#history","title":"<code>history</code>","text":"<p>Convert ChatGPT export files into a tidy Markdown archive.</p>"},{"location":"cli/willow-cli/#vc-step","title":"<code>vc-step</code>","text":"<p>Append a short note about your current version-control loop.</p>"},{"location":"cli/willow-cli/#docs","title":"<code>docs</code>","text":"<p>Build and serve the MkDocs documentation with live reload.</p>"},{"location":"cli/willow-cli/#update-net","title":"<code>update-net</code>","text":"<p>Ingest a document into the Willow graph and render a visualization. Snapshots of the source can be stored alongside the file.</p>"},{"location":"cli/willow-cli/#publish-field","title":"<code>publish-field</code>","text":"<p>Publish a Markdown file from <code>/field</code> to Google Docs or update an existing document via its share URL.</p>"},{"location":"cli/willow-cli/#agentic","title":"<code>agentic</code>","text":"<p>Instantiate and manage Willow agents. Create a new clipboard agent or load an existing one by partial identifier.</p>"},{"location":"cli/willow-cli/#snip-file","title":"<code>snip-file</code>","text":"<p>Truncate a text file to the last set of useful tokens. Handy for keeping prompts under model limits.</p>"},{"location":"cli/willow-cli/#promptdev-bootstrap","title":"<code>promptdev-bootstrap</code>","text":"<p>Run a three-stage shaping routine starting from a seed prompt. This can generate objective and value drafts, surface key phrases, and package surfacings for comparison.</p> <p>Use these commands individually or chain them together as your workflow evolves.</p>"}]}